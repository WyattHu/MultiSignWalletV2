{
  "address": "0x37A55a5353042Bc05575d847dcADFefB57D244d0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_required",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "Confirmation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "Execution",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "ExecutionFailure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnerAddition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnerRemoval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "RequirementChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "Revocation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "Submission",
      "type": "event"
    },
    {
      "stateMutability": "nonpayable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MAX_OWNER_COUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "addOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_required",
          "type": "uint256"
        }
      ],
      "name": "changeRequirement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "confirmTransaction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "confirmations",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "executeTransaction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "getConfirmationCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "getConfirmations",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_confirmations",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "pending",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        }
      ],
      "name": "getTransactionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "pending",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        }
      ],
      "name": "getTransactionIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_transactionIds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "isConfirmed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "owners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "removeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "replaceOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "required",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "revokeConfirmation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "submitTransaction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transactionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transactions",
      "outputs": [
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x8d4fde5c4a35e4951ceb619cfd2377963d6168953342809a7356a74d3b1edd15",
  "receipt": {
    "to": null,
    "from": "0x294e0bCC654D249eA6EF17f9f83d20B58999C921",
    "contractAddress": "0x37A55a5353042Bc05575d847dcADFefB57D244d0",
    "transactionIndex": 118,
    "gasUsed": "2638473",
    "logsBloom": "0x
    "blockHash": "0x5c1112fd29c734c26f9947a5c3b168a1b846aec1424bc463324987975ff8408a",
    "transactionHash": "0x8d4fde5c4a35e4951ceb619cfd2377963d6168953342809a7356a74d3b1edd15",
    "logs": [],
    "blockNumber": 6276821,
    "cumulativeGasUsed": "22176981",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x294e0bCC654D249eA6EF17f9f83d20B58999C921",
      "0x843F0F7BBF1da45651f6f302162f4B0d04B996CB",
      "0x20269f35CcE661911bFbA5021a9a740b3beb6783"
    ],
    2
  ],
  "numDeployments": 1,
  "solcInputHash": "523e49820d3396fdd849533039abb576",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Execution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"ExecutionFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"RequirementChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Revocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Submission\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MAX_OWNER_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"}],\"name\":\"changeRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"confirmTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"confirmations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmationCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmations\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_confirmations\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pending\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"name\":\"getTransactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pending\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"name\":\"getTransactionIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_transactionIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"replaceOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"required\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"submitTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Stefan George - <stefan.george@consensys.net>\",\"kind\":\"dev\",\"methods\":{\"addOwner(address)\":{\"details\":\"Allows to add a new owner. Transaction has to be sent by wallet.\",\"params\":{\"owner\":\"Address of new owner.\"}},\"changeRequirement(uint256)\":{\"details\":\"Allows to change the number of required confirmations. Transaction has to be sent by wallet.\",\"params\":{\"_required\":\"Number of required confirmations.\"}},\"confirmTransaction(uint256)\":{\"details\":\"Allows an owner to confirm a transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"}},\"constructor\":{\"details\":\"Contract constructor sets initial owners and required number of confirmations.\",\"params\":{\"_owners\":\"List of initial owners.\",\"_required\":\"Number of required confirmations.\"}},\"executeTransaction(uint256)\":{\"details\":\"Allows anyone to execute a confirmed transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"}},\"getConfirmationCount(uint256)\":{\"details\":\"Returns number of confirmations of a transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"},\"returns\":{\"count\":\"Number of confirmations.\"}},\"getConfirmations(uint256)\":{\"details\":\"Returns array with owner addresses, which confirmed transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"},\"returns\":{\"_confirmations\":\"Returns array of owner addresses.\"}},\"getOwners()\":{\"details\":\"Returns list of owners.\",\"returns\":{\"_0\":\"List of owner addresses.\"}},\"getTransactionCount(bool,bool)\":{\"details\":\"Returns total number of transactions after filers are applied.\",\"params\":{\"executed\":\"Include executed transactions.\",\"pending\":\"Include pending transactions.\"},\"returns\":{\"count\":\"Total number of transactions after filters are applied.\"}},\"getTransactionIds(uint256,uint256,bool,bool)\":{\"details\":\"Returns list of transaction IDs in defined range.\",\"params\":{\"executed\":\"Include executed transactions.\",\"from\":\"Index start position of transaction array.\",\"pending\":\"Include pending transactions.\",\"to\":\"Index end position of transaction array.\"},\"returns\":{\"_transactionIds\":\"Returns array of transaction IDs.\"}},\"isConfirmed(uint256)\":{\"details\":\"Returns the confirmation status of a transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"},\"returns\":{\"result\":\"Confirmation status.\"}},\"removeOwner(address)\":{\"details\":\"Allows to remove an owner. Transaction has to be sent by wallet.\",\"params\":{\"owner\":\"Address of owner.\"}},\"replaceOwner(address,address)\":{\"details\":\"Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\",\"params\":{\"newOwner\":\"Address of new owner.\",\"owner\":\"Address of owner to be replaced.\"}},\"revokeConfirmation(uint256)\":{\"details\":\"Allows an owner to revoke a confirmation for a transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"}},\"submitTransaction(address,uint256,bytes)\":{\"details\":\"Allows an owner to submit and confirm a transaction.\",\"params\":{\"data\":\"Transaction data payload.\",\"destination\":\"Transaction target address.\",\"value\":\"Transaction ether value.\"},\"returns\":{\"transactionId\":\"transaction ID.\"}}},\"title\":\"Multisignature wallet - Allows multiple parties to agree on transactions before execution.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MultiSignWallet.sol\":\"MultiSignWallet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/MultiSignWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.\\n/// @author Stefan George - <stefan.george@consensys.net>\\ncontract MultiSignWallet {\\n    /*\\n     *  Events\\n     */\\n    event Confirmation(address indexed sender, uint indexed transactionId);\\n    event Revocation(address indexed sender, uint indexed transactionId);\\n    event Submission(uint indexed transactionId);\\n    event Execution(uint indexed transactionId);\\n    event ExecutionFailure(uint indexed transactionId);\\n    event Deposit(address indexed sender, uint value);\\n    event OwnerAddition(address indexed owner);\\n    event OwnerRemoval(address indexed owner);\\n    event RequirementChange(uint required);\\n\\n    /*\\n     *  Constants\\n     */\\n    uint public MAX_OWNER_COUNT = 50;\\n\\n    /*\\n     *  Storage\\n     */\\n    mapping(uint => Transaction) public transactions;\\n    mapping(uint => mapping(address => bool)) public confirmations;\\n    mapping(address => bool) public isOwner;\\n    address[] public owners;\\n    uint public required;\\n    uint public transactionCount;\\n\\n    struct Transaction {\\n        address destination;\\n        uint value;\\n        bytes data;\\n        bool executed;\\n    }\\n\\n    /*\\n     *  Modifiers\\n     */\\n    modifier onlyWallet() {\\n        require(msg.sender == address(this));\\n        _;\\n    }\\n\\n    modifier ownerDoesNotExist(address owner) {\\n        require(!isOwner[owner]);\\n        _;\\n    }\\n\\n    modifier ownerExists(address owner) {\\n        require(isOwner[owner]);\\n        _;\\n    }\\n\\n    modifier transactionExists(uint transactionId) {\\n        require(transactions[transactionId].destination != address(0));\\n        _;\\n    }\\n\\n    modifier confirmed(uint transactionId, address owner) {\\n        require(confirmations[transactionId][owner]);\\n        _;\\n    }\\n\\n    modifier notConfirmed(uint transactionId, address owner) {\\n        require(!confirmations[transactionId][owner]);\\n        _;\\n    }\\n\\n    modifier notExecuted(uint transactionId) {\\n        require(!transactions[transactionId].executed);\\n        _;\\n    }\\n\\n    modifier notNull(address _address) {\\n        require(_address != address(0));\\n        _;\\n    }\\n\\n    modifier validRequirement(uint ownerCount, uint _required) {\\n        require(\\n            ownerCount <= MAX_OWNER_COUNT &&\\n                _required <= ownerCount &&\\n                _required != 0 &&\\n                ownerCount != 0\\n        );\\n        _;\\n    }\\n\\n    /// @dev Fallback function allows to deposit ether.\\n    receive() external payable {\\n        if (msg.value > 0) emit Deposit(msg.sender, msg.value);\\n    }\\n\\n    fallback() external {}\\n\\n    /*\\n     * Public functions\\n     */\\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\\n    /// @param _owners List of initial owners.\\n    /// @param _required Number of required confirmations.\\n    constructor(\\n        address[] memory _owners,\\n        uint _required\\n    ) validRequirement(_owners.length, _required) {\\n        for (uint i = 0; i < _owners.length; i++) {\\n            require(!isOwner[_owners[i]] && _owners[i] != address(0));\\n            isOwner[_owners[i]] = true;\\n        }\\n        owners = _owners;\\n        required = _required;\\n    }\\n\\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\\n    /// @param owner Address of new owner.\\n    function addOwner(\\n        address owner\\n    )\\n        public\\n        onlyWallet\\n        ownerDoesNotExist(owner)\\n        notNull(owner)\\n        validRequirement(owners.length + 1, required)\\n    {\\n        isOwner[owner] = true;\\n        owners.push(owner);\\n        emit OwnerAddition(owner);\\n    }\\n\\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\\n    /// @param owner Address of owner.\\n    function removeOwner(address owner) public onlyWallet ownerExists(owner) {\\n        isOwner[owner] = false;\\n        for (uint i = 0; i < owners.length - 1; i++)\\n            if (owners[i] == owner) {\\n                owners[i] = owners[owners.length - 1];\\n                owners.pop();\\n                break;\\n            }\\n        if (required > owners.length) changeRequirement(owners.length);\\n        emit OwnerRemoval(owner);\\n    }\\n\\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\\n    /// @param owner Address of owner to be replaced.\\n    /// @param newOwner Address of new owner.\\n    function replaceOwner(\\n        address owner,\\n        address newOwner\\n    ) public onlyWallet ownerExists(owner) ownerDoesNotExist(newOwner) {\\n        for (uint i = 0; i < owners.length; i++)\\n            if (owners[i] == owner) {\\n                owners[i] = newOwner;\\n                break;\\n            }\\n        isOwner[owner] = false;\\n        isOwner[newOwner] = true;\\n        emit OwnerRemoval(owner);\\n        emit OwnerAddition(newOwner);\\n    }\\n\\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\\n    /// @param _required Number of required confirmations.\\n    function changeRequirement(\\n        uint _required\\n    ) public onlyWallet validRequirement(owners.length, _required) {\\n        required = _required;\\n        emit RequirementChange(_required);\\n    }\\n\\n    /// @dev Allows an owner to submit and confirm a transaction.\\n    /// @param destination Transaction target address.\\n    /// @param value Transaction ether value.\\n    /// @param data Transaction data payload.\\n    /// @return transactionId transaction ID.\\n    function submitTransaction(\\n        address destination,\\n        uint value,\\n        bytes memory data\\n    ) public returns (uint transactionId) {\\n        transactionId = addTransaction(destination, value, data);\\n        confirmTransaction(transactionId);\\n    }\\n\\n    /// @dev Allows an owner to confirm a transaction.\\n    /// @param transactionId Transaction ID.\\n    function confirmTransaction(\\n        uint transactionId\\n    )\\n        public\\n        ownerExists(msg.sender)\\n        transactionExists(transactionId)\\n        notConfirmed(transactionId, msg.sender)\\n    {\\n        confirmations[transactionId][msg.sender] = true;\\n        emit Confirmation(msg.sender, transactionId);\\n        executeTransaction(transactionId);\\n    }\\n\\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\\n    /// @param transactionId Transaction ID.\\n    function revokeConfirmation(\\n        uint transactionId\\n    )\\n        public\\n        ownerExists(msg.sender)\\n        confirmed(transactionId, msg.sender)\\n        notExecuted(transactionId)\\n    {\\n        confirmations[transactionId][msg.sender] = false;\\n        emit Revocation(msg.sender, transactionId);\\n    }\\n\\n    /// @dev Allows anyone to execute a confirmed transaction.\\n    /// @param transactionId Transaction ID.\\n    function executeTransaction(\\n        uint transactionId\\n    )\\n        public\\n        ownerExists(msg.sender)\\n        confirmed(transactionId, msg.sender)\\n        notExecuted(transactionId)\\n    {\\n        if (isConfirmed(transactionId)) {\\n            Transaction storage txn = transactions[transactionId];\\n            txn.executed = true;\\n            if (\\n                external_call(\\n                    txn.destination,\\n                    txn.value,\\n                    txn.data.length,\\n                    txn.data\\n                )\\n            ) {\\n                emit Execution(transactionId);\\n            } else {\\n                emit ExecutionFailure(transactionId);\\n                txn.executed = false;\\n            }\\n        }\\n    }\\n\\n    // call has been separated into its own function in order to take advantage\\n    // of the Solidity's code generator to produce a loop that copies tx.data into memory.\\n    function external_call(\\n        address destination,\\n        uint value,\\n        uint dataLength,\\n        bytes memory data\\n    ) internal returns (bool result) {\\n        assembly {\\n            let x := mload(0x40) // \\\"Allocate\\\" memory for output (0x40 is where \\\"free memory\\\" pointer is stored by convention)\\n            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\\n            result := call(\\n                gas(), // 34710 is the value that solidity is currently emitting\\n                // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\\n                // callNewAccountGas (25000, in case the destination address does not exist and needs creating)\\n                destination,\\n                value,\\n                d,\\n                dataLength, // Size of the input (in bytes) - this is what fixes the padding problem\\n                x,\\n                0 // Output is ignored, therefore the output size is zero\\n            )\\n        }\\n    }\\n\\n    /// @dev Returns the confirmation status of a transaction.\\n    /// @param transactionId Transaction ID.\\n    /// @return result Confirmation status.\\n    function isConfirmed(uint transactionId) public view returns (bool result) {\\n        uint count = 0;\\n        result = false;\\n        for (uint i = 0; i < owners.length; i++) {\\n            if (confirmations[transactionId][owners[i]]) {\\n                count += 1;\\n            }\\n            if (count == required) {\\n                result = true;\\n                break;\\n            }\\n        }\\n    }\\n\\n    /*\\n     * Internal functions\\n     */\\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\\n    /// @param destination Transaction target address.\\n    /// @param value Transaction ether value.\\n    /// @param data Transaction data payload.\\n    /// @return transactionId Returns transaction ID.\\n    function addTransaction(\\n        address destination,\\n        uint value,\\n        bytes memory data\\n    ) internal notNull(destination) returns (uint transactionId) {\\n        transactionId = transactionCount;\\n        transactions[transactionId] = Transaction({\\n            destination: destination,\\n            value: value,\\n            data: data,\\n            executed: false\\n        });\\n        transactionCount += 1;\\n        emit Submission(transactionId);\\n    }\\n\\n    /*\\n     * Web3 call functions\\n     */\\n    /// @dev Returns number of confirmations of a transaction.\\n    /// @param transactionId Transaction ID.\\n    /// @return count Number of confirmations.\\n    function getConfirmationCount(\\n        uint transactionId\\n    ) public view returns (uint count) {\\n        for (uint i = 0; i < owners.length; i++)\\n            if (confirmations[transactionId][owners[i]]) count += 1;\\n    }\\n\\n    /// @dev Returns total number of transactions after filers are applied.\\n    /// @param pending Include pending transactions.\\n    /// @param executed Include executed transactions.\\n    /// @return count Total number of transactions after filters are applied.\\n    function getTransactionCount(\\n        bool pending,\\n        bool executed\\n    ) public view returns (uint count) {\\n        for (uint i = 0; i < transactionCount; i++)\\n            if (\\n                (pending && !transactions[i].executed) ||\\n                (executed && transactions[i].executed)\\n            ) count += 1;\\n    }\\n\\n    /// @dev Returns list of owners.\\n    /// @return List of owner addresses.\\n    function getOwners() public view returns (address[] memory) {\\n        return owners;\\n    }\\n\\n    /// @dev Returns array with owner addresses, which confirmed transaction.\\n    /// @param transactionId Transaction ID.\\n    /// @return _confirmations Returns array of owner addresses.\\n    function getConfirmations(\\n        uint transactionId\\n    ) public view returns (address[] memory _confirmations) {\\n        address[] memory confirmationsTemp = new address[](owners.length);\\n        uint count = 0;\\n        uint i;\\n        for (i = 0; i < owners.length; i++)\\n            if (confirmations[transactionId][owners[i]]) {\\n                confirmationsTemp[count] = owners[i];\\n                count += 1;\\n            }\\n        _confirmations = new address[](count);\\n        for (i = 0; i < count; i++) _confirmations[i] = confirmationsTemp[i];\\n    }\\n\\n    /// @dev Returns list of transaction IDs in defined range.\\n    /// @param from Index start position of transaction array.\\n    /// @param to Index end position of transaction array.\\n    /// @param pending Include pending transactions.\\n    /// @param executed Include executed transactions.\\n    /// @return _transactionIds Returns array of transaction IDs.\\n    function getTransactionIds(\\n        uint from,\\n        uint to,\\n        bool pending,\\n        bool executed\\n    ) public view returns (uint[] memory _transactionIds) {\\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\\n        uint count = 0;\\n        uint i;\\n        for (i = 0; i < transactionCount; i++)\\n            if (\\n                (pending && !transactions[i].executed) ||\\n                (executed && transactions[i].executed)\\n            ) {\\n                transactionIdsTemp[count] = i;\\n                count += 1;\\n            }\\n        _transactionIds = new uint[](to - from);\\n        for (i = from; i < to; i++)\\n            _transactionIds[i - from] = transactionIdsTemp[i];\\n    }\\n}\\n\",\"keccak256\":\"0xdb4c41cd5b6c657c780ec615e41e0f314879971ae9f4883acc3115fe19b21d11\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260326000553480156200001657600080fd5b50604051620030b5380380620030b583398181016040528101906200003c9190620004de565b8151816000548211158015620000525750818111155b801562000060575060008114155b80156200006e575060008214155b6200007857600080fd5b60005b8451811015620001dc57600360008683815181106200009f576200009e62000544565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16158015620001475750600073ffffffffffffffffffffffffffffffffffffffff1685828151811062000126576200012562000544565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614155b6200015157600080fd5b6001600360008784815181106200016d576200016c62000544565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080620001d390620005a2565b9150506200007b565b508360049080519060200190620001f592919062000207565b508260058190555050505050620005ef565b82805482825590600052602060002090810192821562000283579160200282015b82811115620002825782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019062000228565b5b50905062000292919062000296565b5090565b5b80821115620002b157600081600090555060010162000297565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200031982620002ce565b810181811067ffffffffffffffff821117156200033b576200033a620002df565b5b80604052505050565b600062000350620002b5565b90506200035e82826200030e565b919050565b600067ffffffffffffffff821115620003815762000380620002df565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620003c48262000397565b9050919050565b620003d681620003b7565b8114620003e257600080fd5b50565b600081519050620003f681620003cb565b92915050565b6000620004136200040d8462000363565b62000344565b9050808382526020820190506020840283018581111562000439576200043862000392565b5b835b81811015620004665780620004518882620003e5565b8452602084019350506020810190506200043b565b5050509392505050565b600082601f830112620004885762000487620002c9565b5b81516200049a848260208601620003fc565b91505092915050565b6000819050919050565b620004b881620004a3565b8114620004c457600080fd5b50565b600081519050620004d881620004ad565b92915050565b60008060408385031215620004f857620004f7620002bf565b5b600083015167ffffffffffffffff811115620005195762000518620002c4565b5b620005278582860162000470565b92505060206200053a85828601620004c7565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620005af82620004a3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203620005e457620005e362000573565b5b600182019050919050565b612ab680620005ff6000396000f3fe60806040526004361061012e5760003560e01c8063a0e67e2b116100ab578063c01a8c841161006f578063c01a8c84146104bd578063c6427474146104e6578063d74f8edd14610523578063dc8452cd1461054e578063e20056e614610579578063ee22610b146105a25761018d565b8063a0e67e2b146103c4578063a8abe69a146103ef578063b5dc40c31461042c578063b77bf60014610469578063ba51a6df146104945761018d565b806354741525116100f257806354741525146102a45780637065cb48146102e1578063784547a71461030a5780638b51d13f146103475780639ace38c2146103845761018d565b8063025e7c271461019b578063173825d9146101d857806320ea8d86146102015780632f54bf6e1461022a5780633411c81c146102675761018d565b3661018d57600034111561018b573373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c346040516101829190611f5f565b60405180910390a25b005b34801561019957600080fd5b005b3480156101a757600080fd5b506101c260048036038101906101bd9190611fba565b6105cb565b6040516101cf9190612028565b60405180910390f35b3480156101e457600080fd5b506101ff60048036038101906101fa919061206f565b61060a565b005b34801561020d57600080fd5b5061022860048036038101906102239190611fba565b6108ef565b005b34801561023657600080fd5b50610251600480360381019061024c919061206f565b610a92565b60405161025e91906120b7565b60405180910390f35b34801561027357600080fd5b5061028e600480360381019061028991906120d2565b610ab2565b60405161029b91906120b7565b60405180910390f35b3480156102b057600080fd5b506102cb60048036038101906102c6919061213e565b610ae1565b6040516102d89190611f5f565b60405180910390f35b3480156102ed57600080fd5b506103086004803603810190610303919061206f565b610b84565b005b34801561031657600080fd5b50610331600480360381019061032c9190611fba565b610d9d565b60405161033e91906120b7565b60405180910390f35b34801561035357600080fd5b5061036e60048036038101906103699190611fba565b610e95565b60405161037b9190611f5f565b60405180910390f35b34801561039057600080fd5b506103ab60048036038101906103a69190611fba565b610f74565b6040516103bb949392919061220e565b60405180910390f35b3480156103d057600080fd5b506103d9611059565b6040516103e69190612318565b60405180910390f35b3480156103fb57600080fd5b506104166004803603810190610411919061233a565b6110e7565b604051610423919061245f565b60405180910390f35b34801561043857600080fd5b50610453600480360381019061044e9190611fba565b6112b5565b6040516104609190612318565b60405180910390f35b34801561047557600080fd5b5061047e611545565b60405161048b9190611f5f565b60405180910390f35b3480156104a057600080fd5b506104bb60048036038101906104b69190611fba565b61154b565b005b3480156104c957600080fd5b506104e460048036038101906104df9190611fba565b611602565b005b3480156104f257600080fd5b5061050d600480360381019061050891906125b6565b6117f0565b60405161051a9190611f5f565b60405180910390f35b34801561052f57600080fd5b5061053861180f565b6040516105459190611f5f565b60405180910390f35b34801561055a57600080fd5b50610563611815565b6040516105709190611f5f565b60405180910390f35b34801561058557600080fd5b506105a0600480360381019061059b9190612625565b61181b565b005b3480156105ae57600080fd5b506105c960048036038101906105c49190611fba565b611b35565b005b600481815481106105db57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461064257600080fd5b80600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661069957600080fd5b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060005b60016004805490506107069190612694565b811015610889578273ffffffffffffffffffffffffffffffffffffffff1660048281548110610738576107376126c8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361087657600460016004805490506107929190612694565b815481106107a3576107a26126c8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600482815481106107e2576107e16126c8565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600480548061083c5761083b6126f7565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055610889565b808061088190612726565b9150506106f4565b5060048054905060055411156108a8576108a760048054905061154b565b5b8173ffffffffffffffffffffffffffffffffffffffff167f8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b9060405160405180910390a25050565b33600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661094657600080fd5b81336002600083815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166109af57600080fd5b836001600082815260200190815260200160002060030160009054906101000a900460ff16156109de57600080fd5b60006002600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550843373ffffffffffffffffffffffffffffffffffffffff167ff6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e960405160405180910390a35050505050565b60036020528060005260406000206000915054906101000a900460ff1681565b60026020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b600080600090505b600654811015610b7d57838015610b2157506001600082815260200190815260200160002060030160009054906101000a900460ff16155b80610b555750828015610b5457506001600082815260200190815260200160002060030160009054906101000a900460ff165b5b15610b6a57600182610b67919061276e565b91505b8080610b7590612726565b915050610ae9565b5092915050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610bbc57600080fd5b80600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610c1457600080fd5b81600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610c4e57600080fd5b6001600480549050610c60919061276e565b6005546000548211158015610c755750818111155b8015610c82575060008114155b8015610c8f575060008214155b610c9857600080fd5b6001600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506004859080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508473ffffffffffffffffffffffffffffffffffffffff167ff39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d60405160405180910390a25050505050565b600080600090506000915060005b600480549050811015610e8e5760026000858152602001908152602001600020600060048381548110610de157610de06126c8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610e6957600182610e66919061276e565b91505b6005548203610e7b5760019250610e8e565b8080610e8690612726565b915050610dab565b5050919050565b600080600090505b600480549050811015610f6e5760026000848152602001908152602001600020600060048381548110610ed357610ed26126c8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610f5b57600182610f58919061276e565b91505b8080610f6690612726565b915050610e9d565b50919050565b60016020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001015490806002018054610fc3906127d1565b80601f0160208091040260200160405190810160405280929190818152602001828054610fef906127d1565b801561103c5780601f106110115761010080835404028352916020019161103c565b820191906000526020600020905b81548152906001019060200180831161101f57829003601f168201915b5050505050908060030160009054906101000a900460ff16905084565b606060048054806020026020016040519081016040528092919081815260200182805480156110dd57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611093575b5050505050905090565b6060600060065467ffffffffffffffff8111156111075761110661248b565b5b6040519080825280602002602001820160405280156111355781602001602082028036833780820191505090505b5090506000805b6006548110156111f05785801561117457506001600082815260200190815260200160002060030160009054906101000a900460ff16155b806111a857508480156111a757506001600082815260200190815260200160002060030160009054906101000a900460ff165b5b156111dd57808383815181106111c1576111c06126c8565b5b6020026020010181815250506001826111da919061276e565b91505b80806111e890612726565b91505061113c565b87876111fc9190612694565b67ffffffffffffffff8111156112155761121461248b565b5b6040519080825280602002602001820160405280156112435781602001602082028036833780820191505090505b5093508790505b868110156112aa57828181518110611265576112646126c8565b5b602002602001015184898361127a9190612694565b8151811061128b5761128a6126c8565b5b60200260200101818152505080806112a290612726565b91505061124a565b505050949350505050565b6060600060048054905067ffffffffffffffff8111156112d8576112d761248b565b5b6040519080825280602002602001820160405280156113065781602001602082028036833780820191505090505b5090506000805b60048054905081101561146a5760026000868152602001908152602001600020600060048381548110611343576113426126c8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561145757600481815481106113cf576113ce6126c8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683838151811061140d5761140c6126c8565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600182611454919061276e565b91505b808061146290612726565b91505061130d565b8167ffffffffffffffff8111156114845761148361248b565b5b6040519080825280602002602001820160405280156114b25781602001602082028036833780820191505090505b509350600090505b8181101561153d578281815181106114d5576114d46126c8565b5b60200260200101518482815181106114f0576114ef6126c8565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050808061153590612726565b9150506114ba565b505050919050565b60065481565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461158357600080fd5b60048054905081600054821115801561159c5750818111155b80156115a9575060008114155b80156115b6575060008214155b6115bf57600080fd5b826005819055507fa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a836040516115f59190611f5f565b60405180910390a1505050565b33600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661165957600080fd5b81600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036116c957600080fd5b82336002600083815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561173357600080fd5b60016002600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550843373ffffffffffffffffffffffffffffffffffffffff167f4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef60405160405180910390a36117e985611b35565b5050505050565b60006117fd848484611dc1565b905061180881611602565b9392505050565b60005481565b60055481565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461185357600080fd5b81600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166118aa57600080fd5b81600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561190257600080fd5b60005b6004805490508110156119f8578473ffffffffffffffffffffffffffffffffffffffff166004828154811061193d5761193c6126c8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036119e5578360048281548110611998576119976126c8565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506119f8565b80806119f090612726565b915050611905565b506000600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508373ffffffffffffffffffffffffffffffffffffffff167f8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b9060405160405180910390a28273ffffffffffffffffffffffffffffffffffffffff167ff39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d60405160405180910390a250505050565b33600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611b8c57600080fd5b81336002600083815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611bf557600080fd5b836001600082815260200190815260200160002060030160009054906101000a900460ff1615611c2457600080fd5b611c2d85610d9d565b15611dba57600060016000878152602001908152602001600020905060018160030160006101000a81548160ff021916908315150217905550611d368160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260010154836002018054611ca2906127d1565b9050846002018054611cb3906127d1565b80601f0160208091040260200160405190810160405280929190818152602001828054611cdf906127d1565b8015611d2c5780601f10611d0157610100808354040283529160200191611d2c565b820191906000526020600020905b815481529060010190602001808311611d0f57829003601f168201915b5050505050611f28565b15611d6d57857f33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed7560405160405180910390a2611db8565b857f526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b7923660405160405180910390a260008160030160006101000a81548160ff0219169083151502179055505b505b5050505050565b600083600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611dfd57600080fd5b600654915060405180608001604052808673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001600015158152506001600084815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002019081611eb591906129ae565b5060608201518160030160006101000a81548160ff021916908315150217905550905050600160066000828254611eec919061276e565b92505081905550817fc0ba8fe4b176c1714197d43b9cc6bcf797a4a7461c5fe8d0ef6e184ae7601e5160405160405180910390a2509392505050565b6000604051602083016000828683898b5af192505050949350505050565b6000819050919050565b611f5981611f46565b82525050565b6000602082019050611f746000830184611f50565b92915050565b6000604051905090565b600080fd5b600080fd5b611f9781611f46565b8114611fa257600080fd5b50565b600081359050611fb481611f8e565b92915050565b600060208284031215611fd057611fcf611f84565b5b6000611fde84828501611fa5565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061201282611fe7565b9050919050565b61202281612007565b82525050565b600060208201905061203d6000830184612019565b92915050565b61204c81612007565b811461205757600080fd5b50565b60008135905061206981612043565b92915050565b60006020828403121561208557612084611f84565b5b60006120938482850161205a565b91505092915050565b60008115159050919050565b6120b18161209c565b82525050565b60006020820190506120cc60008301846120a8565b92915050565b600080604083850312156120e9576120e8611f84565b5b60006120f785828601611fa5565b92505060206121088582860161205a565b9150509250929050565b61211b8161209c565b811461212657600080fd5b50565b60008135905061213881612112565b92915050565b6000806040838503121561215557612154611f84565b5b600061216385828601612129565b925050602061217485828601612129565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b838110156121b857808201518184015260208101905061219d565b60008484015250505050565b6000601f19601f8301169050919050565b60006121e08261217e565b6121ea8185612189565b93506121fa81856020860161219a565b612203816121c4565b840191505092915050565b60006080820190506122236000830187612019565b6122306020830186611f50565b818103604083015261224281856121d5565b905061225160608301846120a8565b95945050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61228f81612007565b82525050565b60006122a18383612286565b60208301905092915050565b6000602082019050919050565b60006122c58261225a565b6122cf8185612265565b93506122da83612276565b8060005b8381101561230b5781516122f28882612295565b97506122fd836122ad565b9250506001810190506122de565b5085935050505092915050565b6000602082019050818103600083015261233281846122ba565b905092915050565b6000806000806080858703121561235457612353611f84565b5b600061236287828801611fa5565b945050602061237387828801611fa5565b935050604061238487828801612129565b925050606061239587828801612129565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6123d681611f46565b82525050565b60006123e883836123cd565b60208301905092915050565b6000602082019050919050565b600061240c826123a1565b61241681856123ac565b9350612421836123bd565b8060005b8381101561245257815161243988826123dc565b9750612444836123f4565b925050600181019050612425565b5085935050505092915050565b600060208201905081810360008301526124798184612401565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6124c3826121c4565b810181811067ffffffffffffffff821117156124e2576124e161248b565b5b80604052505050565b60006124f5611f7a565b905061250182826124ba565b919050565b600067ffffffffffffffff8211156125215761252061248b565b5b61252a826121c4565b9050602081019050919050565b82818337600083830152505050565b600061255961255484612506565b6124eb565b90508281526020810184848401111561257557612574612486565b5b612580848285612537565b509392505050565b600082601f83011261259d5761259c612481565b5b81356125ad848260208601612546565b91505092915050565b6000806000606084860312156125cf576125ce611f84565b5b60006125dd8682870161205a565b93505060206125ee86828701611fa5565b925050604084013567ffffffffffffffff81111561260f5761260e611f89565b5b61261b86828701612588565b9150509250925092565b6000806040838503121561263c5761263b611f84565b5b600061264a8582860161205a565b925050602061265b8582860161205a565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061269f82611f46565b91506126aa83611f46565b92508282039050818111156126c2576126c1612665565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600061273182611f46565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361276357612762612665565b5b600182019050919050565b600061277982611f46565b915061278483611f46565b925082820190508082111561279c5761279b612665565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806127e957607f821691505b6020821081036127fc576127fb6127a2565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026128647fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612827565b61286e8683612827565b95508019841693508086168417925050509392505050565b6000819050919050565b60006128ab6128a66128a184611f46565b612886565b611f46565b9050919050565b6000819050919050565b6128c583612890565b6128d96128d1826128b2565b848454612834565b825550505050565b600090565b6128ee6128e1565b6128f98184846128bc565b505050565b5b8181101561291d576129126000826128e6565b6001810190506128ff565b5050565b601f8211156129625761293381612802565b61293c84612817565b8101602085101561294b578190505b61295f61295785612817565b8301826128fe565b50505b505050565b600082821c905092915050565b600061298560001984600802612967565b1980831691505092915050565b600061299e8383612974565b9150826002028217905092915050565b6129b78261217e565b67ffffffffffffffff8111156129d0576129cf61248b565b5b6129da82546127d1565b6129e5828285612921565b600060209050601f831160018114612a185760008415612a06578287015190505b612a108582612992565b865550612a78565b601f198416612a2686612802565b60005b82811015612a4e57848901518255600182019150602085019450602081019050612a29565b86831015612a6b5784890151612a67601f891682612974565b8355505b6001600288020188555050505b50505050505056fea2646970667358221220a902e4f60b3c400d506cb43097ff79f92df46640ac166f0621124b809fcc484e64736f6c63430008140033",
  "deployedBytecode": "0x60806040526004361061012e5760003560e01c8063a0e67e2b116100ab578063c01a8c841161006f578063c01a8c84146104bd578063c6427474146104e6578063d74f8edd14610523578063dc8452cd1461054e578063e20056e614610579578063ee22610b146105a25761018d565b8063a0e67e2b146103c4578063a8abe69a146103ef578063b5dc40c31461042c578063b77bf60014610469578063ba51a6df146104945761018d565b806354741525116100f257806354741525146102a45780637065cb48146102e1578063784547a71461030a5780638b51d13f146103475780639ace38c2146103845761018d565b8063025e7c271461019b578063173825d9146101d857806320ea8d86146102015780632f54bf6e1461022a5780633411c81c146102675761018d565b3661018d57600034111561018b573373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c346040516101829190611f5f565b60405180910390a25b005b34801561019957600080fd5b005b3480156101a757600080fd5b506101c260048036038101906101bd9190611fba565b6105cb565b6040516101cf9190612028565b60405180910390f35b3480156101e457600080fd5b506101ff60048036038101906101fa919061206f565b61060a565b005b34801561020d57600080fd5b5061022860048036038101906102239190611fba565b6108ef565b005b34801561023657600080fd5b50610251600480360381019061024c919061206f565b610a92565b60405161025e91906120b7565b60405180910390f35b34801561027357600080fd5b5061028e600480360381019061028991906120d2565b610ab2565b60405161029b91906120b7565b60405180910390f35b3480156102b057600080fd5b506102cb60048036038101906102c6919061213e565b610ae1565b6040516102d89190611f5f565b60405180910390f35b3480156102ed57600080fd5b506103086004803603810190610303919061206f565b610b84565b005b34801561031657600080fd5b50610331600480360381019061032c9190611fba565b610d9d565b60405161033e91906120b7565b60405180910390f35b34801561035357600080fd5b5061036e60048036038101906103699190611fba565b610e95565b60405161037b9190611f5f565b60405180910390f35b34801561039057600080fd5b506103ab60048036038101906103a69190611fba565b610f74565b6040516103bb949392919061220e565b60405180910390f35b3480156103d057600080fd5b506103d9611059565b6040516103e69190612318565b60405180910390f35b3480156103fb57600080fd5b506104166004803603810190610411919061233a565b6110e7565b604051610423919061245f565b60405180910390f35b34801561043857600080fd5b50610453600480360381019061044e9190611fba565b6112b5565b6040516104609190612318565b60405180910390f35b34801561047557600080fd5b5061047e611545565b60405161048b9190611f5f565b60405180910390f35b3480156104a057600080fd5b506104bb60048036038101906104b69190611fba565b61154b565b005b3480156104c957600080fd5b506104e460048036038101906104df9190611fba565b611602565b005b3480156104f257600080fd5b5061050d600480360381019061050891906125b6565b6117f0565b60405161051a9190611f5f565b60405180910390f35b34801561052f57600080fd5b5061053861180f565b6040516105459190611f5f565b60405180910390f35b34801561055a57600080fd5b50610563611815565b6040516105709190611f5f565b60405180910390f35b34801561058557600080fd5b506105a0600480360381019061059b9190612625565b61181b565b005b3480156105ae57600080fd5b506105c960048036038101906105c49190611fba565b611b35565b005b600481815481106105db57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461064257600080fd5b80600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661069957600080fd5b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060005b60016004805490506107069190612694565b811015610889578273ffffffffffffffffffffffffffffffffffffffff1660048281548110610738576107376126c8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361087657600460016004805490506107929190612694565b815481106107a3576107a26126c8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600482815481106107e2576107e16126c8565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600480548061083c5761083b6126f7565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055610889565b808061088190612726565b9150506106f4565b5060048054905060055411156108a8576108a760048054905061154b565b5b8173ffffffffffffffffffffffffffffffffffffffff167f8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b9060405160405180910390a25050565b33600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661094657600080fd5b81336002600083815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166109af57600080fd5b836001600082815260200190815260200160002060030160009054906101000a900460ff16156109de57600080fd5b60006002600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550843373ffffffffffffffffffffffffffffffffffffffff167ff6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e960405160405180910390a35050505050565b60036020528060005260406000206000915054906101000a900460ff1681565b60026020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b600080600090505b600654811015610b7d57838015610b2157506001600082815260200190815260200160002060030160009054906101000a900460ff16155b80610b555750828015610b5457506001600082815260200190815260200160002060030160009054906101000a900460ff165b5b15610b6a57600182610b67919061276e565b91505b8080610b7590612726565b915050610ae9565b5092915050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610bbc57600080fd5b80600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610c1457600080fd5b81600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610c4e57600080fd5b6001600480549050610c60919061276e565b6005546000548211158015610c755750818111155b8015610c82575060008114155b8015610c8f575060008214155b610c9857600080fd5b6001600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506004859080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508473ffffffffffffffffffffffffffffffffffffffff167ff39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d60405160405180910390a25050505050565b600080600090506000915060005b600480549050811015610e8e5760026000858152602001908152602001600020600060048381548110610de157610de06126c8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610e6957600182610e66919061276e565b91505b6005548203610e7b5760019250610e8e565b8080610e8690612726565b915050610dab565b5050919050565b600080600090505b600480549050811015610f6e5760026000848152602001908152602001600020600060048381548110610ed357610ed26126c8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610f5b57600182610f58919061276e565b91505b8080610f6690612726565b915050610e9d565b50919050565b60016020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001015490806002018054610fc3906127d1565b80601f0160208091040260200160405190810160405280929190818152602001828054610fef906127d1565b801561103c5780601f106110115761010080835404028352916020019161103c565b820191906000526020600020905b81548152906001019060200180831161101f57829003601f168201915b5050505050908060030160009054906101000a900460ff16905084565b606060048054806020026020016040519081016040528092919081815260200182805480156110dd57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611093575b5050505050905090565b6060600060065467ffffffffffffffff8111156111075761110661248b565b5b6040519080825280602002602001820160405280156111355781602001602082028036833780820191505090505b5090506000805b6006548110156111f05785801561117457506001600082815260200190815260200160002060030160009054906101000a900460ff16155b806111a857508480156111a757506001600082815260200190815260200160002060030160009054906101000a900460ff165b5b156111dd57808383815181106111c1576111c06126c8565b5b6020026020010181815250506001826111da919061276e565b91505b80806111e890612726565b91505061113c565b87876111fc9190612694565b67ffffffffffffffff8111156112155761121461248b565b5b6040519080825280602002602001820160405280156112435781602001602082028036833780820191505090505b5093508790505b868110156112aa57828181518110611265576112646126c8565b5b602002602001015184898361127a9190612694565b8151811061128b5761128a6126c8565b5b60200260200101818152505080806112a290612726565b91505061124a565b505050949350505050565b6060600060048054905067ffffffffffffffff8111156112d8576112d761248b565b5b6040519080825280602002602001820160405280156113065781602001602082028036833780820191505090505b5090506000805b60048054905081101561146a5760026000868152602001908152602001600020600060048381548110611343576113426126c8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561145757600481815481106113cf576113ce6126c8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683838151811061140d5761140c6126c8565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600182611454919061276e565b91505b808061146290612726565b91505061130d565b8167ffffffffffffffff8111156114845761148361248b565b5b6040519080825280602002602001820160405280156114b25781602001602082028036833780820191505090505b509350600090505b8181101561153d578281815181106114d5576114d46126c8565b5b60200260200101518482815181106114f0576114ef6126c8565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050808061153590612726565b9150506114ba565b505050919050565b60065481565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461158357600080fd5b60048054905081600054821115801561159c5750818111155b80156115a9575060008114155b80156115b6575060008214155b6115bf57600080fd5b826005819055507fa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a836040516115f59190611f5f565b60405180910390a1505050565b33600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661165957600080fd5b81600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036116c957600080fd5b82336002600083815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561173357600080fd5b60016002600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550843373ffffffffffffffffffffffffffffffffffffffff167f4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef60405160405180910390a36117e985611b35565b5050505050565b60006117fd848484611dc1565b905061180881611602565b9392505050565b60005481565b60055481565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461185357600080fd5b81600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166118aa57600080fd5b81600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561190257600080fd5b60005b6004805490508110156119f8578473ffffffffffffffffffffffffffffffffffffffff166004828154811061193d5761193c6126c8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036119e5578360048281548110611998576119976126c8565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506119f8565b80806119f090612726565b915050611905565b506000600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508373ffffffffffffffffffffffffffffffffffffffff167f8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b9060405160405180910390a28273ffffffffffffffffffffffffffffffffffffffff167ff39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d60405160405180910390a250505050565b33600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611b8c57600080fd5b81336002600083815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611bf557600080fd5b836001600082815260200190815260200160002060030160009054906101000a900460ff1615611c2457600080fd5b611c2d85610d9d565b15611dba57600060016000878152602001908152602001600020905060018160030160006101000a81548160ff021916908315150217905550611d368160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260010154836002018054611ca2906127d1565b9050846002018054611cb3906127d1565b80601f0160208091040260200160405190810160405280929190818152602001828054611cdf906127d1565b8015611d2c5780601f10611d0157610100808354040283529160200191611d2c565b820191906000526020600020905b815481529060010190602001808311611d0f57829003601f168201915b5050505050611f28565b15611d6d57857f33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed7560405160405180910390a2611db8565b857f526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b7923660405160405180910390a260008160030160006101000a81548160ff0219169083151502179055505b505b5050505050565b600083600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611dfd57600080fd5b600654915060405180608001604052808673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001600015158152506001600084815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002019081611eb591906129ae565b5060608201518160030160006101000a81548160ff021916908315150217905550905050600160066000828254611eec919061276e565b92505081905550817fc0ba8fe4b176c1714197d43b9cc6bcf797a4a7461c5fe8d0ef6e184ae7601e5160405160405180910390a2509392505050565b6000604051602083016000828683898b5af192505050949350505050565b6000819050919050565b611f5981611f46565b82525050565b6000602082019050611f746000830184611f50565b92915050565b6000604051905090565b600080fd5b600080fd5b611f9781611f46565b8114611fa257600080fd5b50565b600081359050611fb481611f8e565b92915050565b600060208284031215611fd057611fcf611f84565b5b6000611fde84828501611fa5565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061201282611fe7565b9050919050565b61202281612007565b82525050565b600060208201905061203d6000830184612019565b92915050565b61204c81612007565b811461205757600080fd5b50565b60008135905061206981612043565b92915050565b60006020828403121561208557612084611f84565b5b60006120938482850161205a565b91505092915050565b60008115159050919050565b6120b18161209c565b82525050565b60006020820190506120cc60008301846120a8565b92915050565b600080604083850312156120e9576120e8611f84565b5b60006120f785828601611fa5565b92505060206121088582860161205a565b9150509250929050565b61211b8161209c565b811461212657600080fd5b50565b60008135905061213881612112565b92915050565b6000806040838503121561215557612154611f84565b5b600061216385828601612129565b925050602061217485828601612129565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b838110156121b857808201518184015260208101905061219d565b60008484015250505050565b6000601f19601f8301169050919050565b60006121e08261217e565b6121ea8185612189565b93506121fa81856020860161219a565b612203816121c4565b840191505092915050565b60006080820190506122236000830187612019565b6122306020830186611f50565b818103604083015261224281856121d5565b905061225160608301846120a8565b95945050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61228f81612007565b82525050565b60006122a18383612286565b60208301905092915050565b6000602082019050919050565b60006122c58261225a565b6122cf8185612265565b93506122da83612276565b8060005b8381101561230b5781516122f28882612295565b97506122fd836122ad565b9250506001810190506122de565b5085935050505092915050565b6000602082019050818103600083015261233281846122ba565b905092915050565b6000806000806080858703121561235457612353611f84565b5b600061236287828801611fa5565b945050602061237387828801611fa5565b935050604061238487828801612129565b925050606061239587828801612129565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6123d681611f46565b82525050565b60006123e883836123cd565b60208301905092915050565b6000602082019050919050565b600061240c826123a1565b61241681856123ac565b9350612421836123bd565b8060005b8381101561245257815161243988826123dc565b9750612444836123f4565b925050600181019050612425565b5085935050505092915050565b600060208201905081810360008301526124798184612401565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6124c3826121c4565b810181811067ffffffffffffffff821117156124e2576124e161248b565b5b80604052505050565b60006124f5611f7a565b905061250182826124ba565b919050565b600067ffffffffffffffff8211156125215761252061248b565b5b61252a826121c4565b9050602081019050919050565b82818337600083830152505050565b600061255961255484612506565b6124eb565b90508281526020810184848401111561257557612574612486565b5b612580848285612537565b509392505050565b600082601f83011261259d5761259c612481565b5b81356125ad848260208601612546565b91505092915050565b6000806000606084860312156125cf576125ce611f84565b5b60006125dd8682870161205a565b93505060206125ee86828701611fa5565b925050604084013567ffffffffffffffff81111561260f5761260e611f89565b5b61261b86828701612588565b9150509250925092565b6000806040838503121561263c5761263b611f84565b5b600061264a8582860161205a565b925050602061265b8582860161205a565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061269f82611f46565b91506126aa83611f46565b92508282039050818111156126c2576126c1612665565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600061273182611f46565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361276357612762612665565b5b600182019050919050565b600061277982611f46565b915061278483611f46565b925082820190508082111561279c5761279b612665565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806127e957607f821691505b6020821081036127fc576127fb6127a2565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026128647fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612827565b61286e8683612827565b95508019841693508086168417925050509392505050565b6000819050919050565b60006128ab6128a66128a184611f46565b612886565b611f46565b9050919050565b6000819050919050565b6128c583612890565b6128d96128d1826128b2565b848454612834565b825550505050565b600090565b6128ee6128e1565b6128f98184846128bc565b505050565b5b8181101561291d576129126000826128e6565b6001810190506128ff565b5050565b601f8211156129625761293381612802565b61293c84612817565b8101602085101561294b578190505b61295f61295785612817565b8301826128fe565b50505b505050565b600082821c905092915050565b600061298560001984600802612967565b1980831691505092915050565b600061299e8383612974565b9150826002028217905092915050565b6129b78261217e565b67ffffffffffffffff8111156129d0576129cf61248b565b5b6129da82546127d1565b6129e5828285612921565b600060209050601f831160018114612a185760008415612a06578287015190505b612a108582612992565b865550612a78565b601f198416612a2686612802565b60005b82811015612a4e57848901518255600182019150602085019450602081019050612a29565b86831015612a6b5784890151612a67601f891682612974565b8355505b6001600288020188555050505b50505050505056fea2646970667358221220a902e4f60b3c400d506cb43097ff79f92df46640ac166f0621124b809fcc484e64736f6c63430008140033",
  "devdoc": {
    "author": "Stefan George - <stefan.george@consensys.net>",
    "kind": "dev",
    "methods": {
      "addOwner(address)": {
        "details": "Allows to add a new owner. Transaction has to be sent by wallet.",
        "params": {
          "owner": "Address of new owner."
        }
      },
      "changeRequirement(uint256)": {
        "details": "Allows to change the number of required confirmations. Transaction has to be sent by wallet.",
        "params": {
          "_required": "Number of required confirmations."
        }
      },
      "confirmTransaction(uint256)": {
        "details": "Allows an owner to confirm a transaction.",
        "params": {
          "transactionId": "Transaction ID."
        }
      },
      "constructor": {
        "details": "Contract constructor sets initial owners and required number of confirmations.",
        "params": {
          "_owners": "List of initial owners.",
          "_required": "Number of required confirmations."
        }
      },
      "executeTransaction(uint256)": {
        "details": "Allows anyone to execute a confirmed transaction.",
        "params": {
          "transactionId": "Transaction ID."
        }
      },
      "getConfirmationCount(uint256)": {
        "details": "Returns number of confirmations of a transaction.",
        "params": {
          "transactionId": "Transaction ID."
        },
        "returns": {
          "count": "Number of confirmations."
        }
      },
      "getConfirmations(uint256)": {
        "details": "Returns array with owner addresses, which confirmed transaction.",
        "params": {
          "transactionId": "Transaction ID."
        },
        "returns": {
          "_confirmations": "Returns array of owner addresses."
        }
      },
      "getOwners()": {
        "details": "Returns list of owners.",
        "returns": {
          "_0": "List of owner addresses."
        }
      },
      "getTransactionCount(bool,bool)": {
        "details": "Returns total number of transactions after filers are applied.",
        "params": {
          "executed": "Include executed transactions.",
          "pending": "Include pending transactions."
        },
        "returns": {
          "count": "Total number of transactions after filters are applied."
        }
      },
      "getTransactionIds(uint256,uint256,bool,bool)": {
        "details": "Returns list of transaction IDs in defined range.",
        "params": {
          "executed": "Include executed transactions.",
          "from": "Index start position of transaction array.",
          "pending": "Include pending transactions.",
          "to": "Index end position of transaction array."
        },
        "returns": {
          "_transactionIds": "Returns array of transaction IDs."
        }
      },
      "isConfirmed(uint256)": {
        "details": "Returns the confirmation status of a transaction.",
        "params": {
          "transactionId": "Transaction ID."
        },
        "returns": {
          "result": "Confirmation status."
        }
      },
      "removeOwner(address)": {
        "details": "Allows to remove an owner. Transaction has to be sent by wallet.",
        "params": {
          "owner": "Address of owner."
        }
      },
      "replaceOwner(address,address)": {
        "details": "Allows to replace an owner with a new owner. Transaction has to be sent by wallet.",
        "params": {
          "newOwner": "Address of new owner.",
          "owner": "Address of owner to be replaced."
        }
      },
      "revokeConfirmation(uint256)": {
        "details": "Allows an owner to revoke a confirmation for a transaction.",
        "params": {
          "transactionId": "Transaction ID."
        }
      },
      "submitTransaction(address,uint256,bytes)": {
        "details": "Allows an owner to submit and confirm a transaction.",
        "params": {
          "data": "Transaction data payload.",
          "destination": "Transaction target address.",
          "value": "Transaction ether value."
        },
        "returns": {
          "transactionId": "transaction ID."
        }
      }
    },
    "title": "Multisignature wallet - Allows multiple parties to agree on transactions before execution.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 47,
        "contract": "contracts/MultiSignWallet.sol:MultiSignWallet",
        "label": "MAX_OWNER_COUNT",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 52,
        "contract": "contracts/MultiSignWallet.sol:MultiSignWallet",
        "label": "transactions",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Transaction)78_storage)"
      },
      {
        "astId": 58,
        "contract": "contracts/MultiSignWallet.sol:MultiSignWallet",
        "label": "confirmations",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 62,
        "contract": "contracts/MultiSignWallet.sol:MultiSignWallet",
        "label": "isOwner",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 65,
        "contract": "contracts/MultiSignWallet.sol:MultiSignWallet",
        "label": "owners",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 67,
        "contract": "contracts/MultiSignWallet.sol:MultiSignWallet",
        "label": "required",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 69,
        "contract": "contracts/MultiSignWallet.sol:MultiSignWallet",
        "label": "transactionCount",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_struct(Transaction)78_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MultiSignWallet.Transaction)",
        "numberOfBytes": "32",
        "value": "t_struct(Transaction)78_storage"
      },
      "t_struct(Transaction)78_storage": {
        "encoding": "inplace",
        "label": "struct MultiSignWallet.Transaction",
        "members": [
          {
            "astId": 71,
            "contract": "contracts/MultiSignWallet.sol:MultiSignWallet",
            "label": "destination",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 73,
            "contract": "contracts/MultiSignWallet.sol:MultiSignWallet",
            "label": "value",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 75,
            "contract": "contracts/MultiSignWallet.sol:MultiSignWallet",
            "label": "data",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          },
          {
            "astId": 77,
            "contract": "contracts/MultiSignWallet.sol:MultiSignWallet",
            "label": "executed",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}